4.1 A Minimal Application
A minimal Flask application looks something like this:
from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello_world():
return 'Hello World!'
if __name__ == '__main__':
app.run()
Just save it as hello.py (or something similar) and run it with your Python interpreter.
Make sure to not call your application flask.py because this would conflict with Flask
itself.
$ python hello.py
* Running on http://127.0.0.1:5000/
Now head over to http://127.0.0.1:5000/, and you should see your hello world greeting.
So what did that code do?
1. First we imported the Flask class. An instance of this class will be our WSGI
application.
2. Next we create an instance of this class. The first argument is the name of the
application’s module or package. If you are using a single module (as in this
example), you should use __name__ because depending on if it’s started as application or imported as module the name will be different ('__main__' versus
11
the actual import name). This is needed so that Flask knows where to look for
templates, static files, and so on. For more information have a look at the Flask
documentation.
3. We then use the route() decorator to tell Flask what URL should trigger our
function.
4. The function is given a name which is also used to generate URLs for that particular function, and returns the message we want to display in the user’s browser.
5. Finally we use the run() function to run the local server with our application.
The if __name__ == '__main__': makes sure the server only runs if the script
is executed directly from the Python interpreter and not used as an imported
module.
To stop the server, hit control-C.
Externally Visible Server
If you run the server you will notice that the server is only accessible from your own
computer, not from any other in the network. This is the default because in debugging
mode a user of the application can execute arbitrary Python code on your computer.
If you have debug disabled or trust the users on your network, you can make the server
publicly available simply by changing the call of the run() method to look like this:
app.run(host='0.0.0.0')
This tells your operating system to listen on all public IPs.
4.2 Debug Mode
The run() method is nice to start a local development server, but you would have to
restart it manually after each change to your code. That is not very nice and Flask can
do better. If you enable debug support the server will reload itself on code changes,
and it will also provide you with a helpful debugger if things go wrong.
There are two ways to enable debugging. Either set that flag on the application object:
app.debug = True
app.run()
Or pass it as a parameter to run:
app.run(debug=True)
Both methods have the exact same effect